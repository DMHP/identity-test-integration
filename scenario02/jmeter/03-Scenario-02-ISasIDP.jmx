<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="03-Scenario-02- IS as IDP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="adminPassword" elementType="Argument">
            <stringProp name="Argument.name">adminPassword</stringProp>
            <stringProp name="Argument.value">${__property(adminPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminPasswordSecondary" elementType="Argument">
            <stringProp name="Argument.name">adminPasswordSecondary</stringProp>
            <stringProp name="Argument.value">${__property(adminPasswordSecondary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminUsername" elementType="Argument">
            <stringProp name="Argument.name">adminUsername</stringProp>
            <stringProp name="Argument.value">${__property(adminUsername)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminUsernameSecondary" elementType="Argument">
            <stringProp name="Argument.name">adminUsernameSecondary</stringProp>
            <stringProp name="Argument.value">${__property(adminUsernameSecondary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="alias" elementType="Argument">
            <stringProp name="Argument.name">alias</stringProp>
            <stringProp name="Argument.value">${__property(alias)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ISIdentityProviderName" elementType="Argument">
            <stringProp name="Argument.name">ISIdentityProviderName</stringProp>
            <stringProp name="Argument.value">${__property(ISIdentityProviderName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ISIdPEntityId" elementType="Argument">
            <stringProp name="Argument.name">ISIdPEntityId</stringProp>
            <stringProp name="Argument.value">${__property(ISIdPEntityId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ISSPEntityId" elementType="Argument">
            <stringProp name="Argument.name">ISSPEntityId</stringProp>
            <stringProp name="Argument.value">${__property(ISSPEntityId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Primaryissuer" elementType="Argument">
            <stringProp name="Argument.name">Primaryissuer</stringProp>
            <stringProp name="Argument.value">${__property(Primaryissuer)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryPassword" elementType="Argument">
            <stringProp name="Argument.name">secondaryPassword</stringProp>
            <stringProp name="Argument.value">${__property(secondaryPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryspDescription" elementType="Argument">
            <stringProp name="Argument.name">secondaryspDescription</stringProp>
            <stringProp name="Argument.value">${__property(secondaryspDescription)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondarySPName" elementType="Argument">
            <stringProp name="Argument.name">secondarySPName</stringProp>
            <stringProp name="Argument.value">${__property(secondarySPName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryUsername" elementType="Argument">
            <stringProp name="Argument.name">secondaryUsername</stringProp>
            <stringProp name="Argument.value">${__property(secondaryUsername)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryIncorrectPassword" elementType="Argument">
            <stringProp name="Argument.name">secondaryIncorrectPassword</stringProp>
            <stringProp name="Argument.value">${__property(secondaryIncorrectPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverHost" elementType="Argument">
            <stringProp name="Argument.name">serverHost</stringProp>
            <stringProp name="Argument.value">${__property(serverHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverHostSecondary" elementType="Argument">
            <stringProp name="Argument.name">serverHostSecondary</stringProp>
            <stringProp name="Argument.value">${__property(serverHostSecondary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">${__property(serverPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPortSecondary" elementType="Argument">
            <stringProp name="Argument.name">serverPortSecondary</stringProp>
            <stringProp name="Argument.value">${__property(serverPortSecondary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverSSOurlSecondary" elementType="Argument">
            <stringProp name="Argument.name">serverSSOurlSecondary</stringProp>
            <stringProp name="Argument.value">${__property(serverSSOurlSecondary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPDescriptionPrimary" elementType="Argument">
            <stringProp name="Argument.name">SPDescriptionPrimary</stringProp>
            <stringProp name="Argument.value">${__property(SPDescriptionPrimary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SPNamePrimary" elementType="Argument">
            <stringProp name="Argument.name">SPNamePrimary</stringProp>
            <stringProp name="Argument.value">${__property(SPNamePrimary)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatHost" elementType="Argument">
            <stringProp name="Argument.name">tomcatHost</stringProp>
            <stringProp name="Argument.value">${__property(tomcatHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatPort" elementType="Argument">
            <stringProp name="Argument.name">tomcatPort</stringProp>
            <stringProp name="Argument.value">${__property(tomcatPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="travelocityIssuer" elementType="Argument">
            <stringProp name="Argument.name">travelocityIssuer</stringProp>
            <stringProp name="Argument.value">${__property(travelocityIssuer)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value"> text/xml;charset=UTF-8&#xd;</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Create User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1508396380000</longProp>
        <longProp name="ThreadGroup.end_time">1508396380000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UserCreation in secondary IS" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsernameSecondary}</stringProp>
                <stringProp name="Authorization.password">${adminPasswordSecondary}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create user" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://common.mgt.user.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addUser&gt;&#xd;
         &lt;xsd:userName&gt;${secondaryUsername}&lt;/xsd:userName&gt;&#xd;
         &lt;xsd:password&gt;${secondaryPassword}&lt;/xsd:password&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;xsd:roles&gt;admin&lt;/xsd:roles&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
       &lt;xsd:profileName&gt;Default&lt;/xsd:profileName&gt;&#xd;
      &lt;/xsd:addUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;urn:addUser&quot;</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Configuring the secondary IS as IdP in the primary IS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512450056000</longProp>
        <longProp name="ThreadGroup.end_time">1512450056000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Configuring the secondary IS as IdP in the primary IS" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsername}</stringProp>
                <stringProp name="Authorization.password">${adminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create IDP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:addIdP&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:displayName&gt;${ISIdentityProviderName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${ISIdentityProviderName}&lt;/xsd:identityProviderName&gt;  &#xd;
&#xd;
             	/** Configure Claims */&#xd;
			 	  &#xd;
	   &lt;xsd:claimConfig&gt;&#xd;
    	       &lt;xsd:alwaysSendMappedLocalSubjectId&gt;true&lt;/xsd:alwaysSendMappedLocalSubjectId&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/nickname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;id&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
	   &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/fullname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;email&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/givenname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;first_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/lastname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;last_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/dob&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;age_range&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/url&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;link&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
        		&lt;/xsd:claimMappings&gt; &#xd;
&#xd;
        		&lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;16&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;id&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;17&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;18&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;gender&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;19&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;email&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;20&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;first_name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;21&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;last_name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;22&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;age_range&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;23&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;link&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
 &#xd;
               &#xd;
               &lt;xsd:localClaimDialect&gt;false&lt;/xsd:localClaimDialect&gt;&#xd;
               &lt;xsd:userClaimURI&gt;id&lt;/xsd:userClaimURI&gt;               &#xd;
               &#xd;
        &lt;/xsd:claimConfig&gt;           &#xd;
            &#xd;
            &lt;xsd:identityProviderDescription&gt;IS as IdP in the primary IS&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:alias&gt;https://${serverHost}:${serverPort}/${alias}&lt;/xsd:alias&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &lt;xsd:defaultAuthenticatorConfig&gt;&#xd;
               &lt;xsd:displayName&gt;${ISIdentityProviderName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:name&gt;SAMLSSOAuthenticator&lt;/xsd:name&gt;&#xd;
            &lt;/xsd:defaultAuthenticatorConfig&gt;&#xd;
           &lt;xsd:federatedAuthenticatorConfigs&gt;&#xd;
               &lt;xsd:displayName&gt;${ISIdentityProviderName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:enabled&gt;true&lt;/xsd:enabled&gt;&#xd;
               &lt;xsd:name&gt;SAMLSSOAuthenticator&lt;/xsd:name&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;IdPEntityId&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${ISIdPEntityId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
                 &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;SSOUrl&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;https://${serverHostSecondary}:${serverPortSecondary}/${serverSSOurlSecondary}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;SPEntityId&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${ISSPEntityId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
                 &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;NameIDType&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
            &lt;/xsd:federatedAuthenticatorConfigs&gt;&#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Configuring the secondary IS as IdP in the primary IS
</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addIdP</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Configuring the primary IS as an SP in the secondary IS" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsernameSecondary}</stringProp>
                <stringProp name="Authorization.password">${adminPasswordSecondary}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateSP - SecondarySPName" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
       &lt;xsd:createApplication&gt; &#xd;
      &lt;xsd:serviceProvider&gt; &#xd;
            &lt;xsd1:applicationName&gt;${secondarySPName}&lt;/xsd1:applicationName&gt; &#xd;
            &lt;xsd1:description&gt;${secondaryspDescription}&lt;/xsd1:description&gt; &#xd;
            &lt;xsd1:saasApp&gt;true&lt;/xsd1:saasApp&gt;  &#xd;
             &lt;/xsd:serviceProvider&gt; &#xd;
      &lt;/xsd:createApplication&gt; &#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:createApplication</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register primary IS as a SP in the secondary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.saml.sso.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addRPServiceProvider&gt;      &#xd;
         &lt;xsd:spDto&gt;&#xd;
            &lt;xsd1:assertionConsumerUrl&gt;https://${serverHost}:${serverPort}/commonauth&lt;/xsd1:assertionConsumerUrl&gt;&#xd;
            &lt;xsd1:assertionConsumerUrls&gt;https://${serverHost}:${serverPort}/commonauth&lt;/xsd1:assertionConsumerUrls&gt;&#xd;
            &lt;xsd1:defaultAssertionConsumerUrl&gt;https://${serverHost}:${serverPort}/commonauth&lt;/xsd1:defaultAssertionConsumerUrl&gt;&#xd;
            &lt;xsd1:digestAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#sha1&lt;/xsd1:digestAlgorithmURI&gt;&#xd;
            &lt;xsd1:doSignAssertions&gt;true&lt;/xsd1:doSignAssertions&gt;&#xd;
            &lt;xsd1:doSignResponse&gt;true&lt;/xsd1:doSignResponse&gt;&#xd;
            &lt;xsd1:doSingleLogout&gt;true&lt;/xsd1:doSingleLogout&gt;&#xd;
            &lt;xsd1:doValidateSignatureInRequests&gt;false&lt;/xsd1:doValidateSignatureInRequests&gt;&#xd;
            &lt;xsd1:enableAttributeProfile&gt;true&lt;/xsd1:enableAttributeProfile&gt;&#xd;
            &lt;xsd1:enableAttributesByDefault&gt;true&lt;/xsd1:enableAttributesByDefault&gt;&#xd;
             &lt;xsd1:issuer&gt;${Primaryissuer}&lt;/xsd1:issuer&gt;           &#xd;
            &lt;xsd1:signingAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#rsa-sha1&lt;/xsd1:signingAlgorithmURI&gt;&#xd;
         &lt;/xsd:spDto&gt;&#xd;
      &lt;/xsd:addRPServiceProvider&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRPServiceProvider</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ServiceIndex " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getServiceProviders/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getServiceProviders</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Service Index Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceIndex</stringProp>
              <stringProp name="RegexExtractor.regex">attributeConsumingServiceIndex&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_ServiceIndex</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SP ID " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${secondarySPName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:getApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">appID</stringProp>
              <stringProp name="RegexExtractor.regex">applicationID&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_AppID</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update SP " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${secondarySPName}&lt;/xsd1:applicationName&gt;&#xd;
            &lt;xsd1:description&gt;${secondaryspDescription}&lt;/xsd1:description&gt;&#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${Primaryissuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
                  &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;&#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${Primaryissuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${Primaryissuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
            &lt;/xsd1:inboundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:inboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;&#xd;
               &lt;xsd1:provisioningUserStore/&gt;&#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt;&#xd;
            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;xsd1:authenticationSteps&gt;&#xd;
                  &lt;!--Zero or more repetitions:--&gt;&#xd;
                  &lt;xsd1:federatedIdentityProviders&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd1:identityProviderName&gt;${GoogleIdentityProviderName}&lt;/xsd1:identityProviderName&gt;&#xd;
                  &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
               &lt;/xsd1:authenticationSteps&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt;&#xd;
               &lt;xsd1:subjectClaimUri/&gt;&#xd;
            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:outboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt;&#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt;&#xd;
            &lt;xsd1:owner&gt;            &#xd;
               &lt;xsd1:userName&gt;admin&lt;/xsd1:userName&gt;&#xd;
                      &lt;/xsd1:owner&gt;&#xd;
            &lt;xsd1:permissionAndRoleConfig&gt;&#xd;
               &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt;&#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt;&#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
            &lt;xsd1:saasApp&gt;true&lt;/xsd1:saasApp&gt;&#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Travelocity as the SP in the primary IS" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsername}</stringProp>
                <stringProp name="Authorization.password">${adminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create SP -SPNamePrimary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
       &lt;xsd:createApplication&gt; &#xd;
      &lt;xsd:serviceProvider&gt; &#xd;
            &lt;xsd1:applicationName&gt;${SPNamePrimary}&lt;/xsd1:applicationName&gt; &#xd;
            &lt;xsd1:description&gt;${SPDescriptionPrimary}&lt;/xsd1:description&gt;                     &#xd;
         &lt;/xsd:serviceProvider&gt; &#xd;
      &lt;/xsd:createApplication&gt; &#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:createApplication</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register Travelocity as SP " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.saml.sso.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addRPServiceProvider&gt;      &#xd;
         &lt;xsd:spDto&gt;&#xd;
            &lt;xsd1:assertionConsumerUrl&gt;http://${tomcatHost}:${tomcatPort}/${travelocityIssuer}/home.jsp&lt;/xsd1:assertionConsumerUrl&gt;&#xd;
            &lt;xsd1:assertionConsumerUrls&gt;http://${tomcatHost}:${tomcatPort}/${travelocityIssuer}/home.jsp&lt;/xsd1:assertionConsumerUrls&gt;&#xd;
            &lt;xsd1:defaultAssertionConsumerUrl&gt;http://${tomcatHost}:${tomcatPort}/${travelocityIssuer}/home.jsp&lt;/xsd1:defaultAssertionConsumerUrl&gt;&#xd;
            &lt;xsd1:digestAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#sha1&lt;/xsd1:digestAlgorithmURI&gt;&#xd;
            &lt;xsd1:doSignAssertions&gt;true&lt;/xsd1:doSignAssertions&gt;&#xd;
            &lt;xsd1:doSignResponse&gt;true&lt;/xsd1:doSignResponse&gt;&#xd;
            &lt;xsd1:doSingleLogout&gt;true&lt;/xsd1:doSingleLogout&gt;&#xd;
            &lt;xsd1:doValidateSignatureInRequests&gt;false&lt;/xsd1:doValidateSignatureInRequests&gt;&#xd;
            &lt;xsd1:enableAttributeProfile&gt;true&lt;/xsd1:enableAttributeProfile&gt;&#xd;
            &lt;xsd1:enableAttributesByDefault&gt;true&lt;/xsd1:enableAttributesByDefault&gt;&#xd;
             &lt;xsd1:issuer&gt;${travelocityIssuer}&lt;/xsd1:issuer&gt;           &#xd;
            &lt;xsd1:signingAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#rsa-sha1&lt;/xsd1:signingAlgorithmURI&gt;&#xd;
         &lt;/xsd:spDto&gt;&#xd;
      &lt;/xsd:addRPServiceProvider&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRPServiceProvider</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ServiceIndex " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getServiceProviders/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getServiceProviders</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Service Index Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceIndex</stringProp>
              <stringProp name="RegexExtractor.regex">attributeConsumingServiceIndex&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_ServiceIndex</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SP ID " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${SPNamePrimary}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:getApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">appID</stringProp>
              <stringProp name="RegexExtractor.regex">applicationID&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_AppID</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update SP " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${SPNamePrimary}&lt;/xsd1:applicationName&gt;&#xd;
            &lt;xsd1:description&gt;${SPDescriptionPrimary}&lt;/xsd1:description&gt;&#xd;
&#xd;
                       &#xd;
            &#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
                  &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;&#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
            &lt;/xsd1:inboundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:inboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;&#xd;
               &lt;xsd1:provisioningUserStore/&gt;&#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt;&#xd;
            &lt;xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;xsd1:authenticationSteps&gt;&#xd;
                  &lt;!--Zero or more repetitions:--&gt;&#xd;
                  &lt;xsd1:federatedIdentityProviders&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd1:identityProviderName&gt;${ISIdentityProviderName}&lt;/xsd1:identityProviderName&gt;&#xd;
                  &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
               &lt;/xsd1:authenticationSteps&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt;&#xd;
               &lt;xsd1:subjectClaimUri/&gt;&#xd;
            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:outboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt;&#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt;&#xd;
            &lt;xsd1:owner&gt;&#xd;
            &#xd;
               &lt;xsd1:userName&gt;${adminUsername}&lt;/xsd1:userName&gt;&#xd;
                      &lt;/xsd1:owner&gt;&#xd;
            &lt;xsd1:permissionAndRoleConfig&gt;&#xd;
               &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt;&#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt;&#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
            &lt;xsd1:saasApp&gt;true&lt;/xsd1:saasApp&gt;&#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login to SP Travelocity - Positive Scenario" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512450056000</longProp>
        <longProp name="ThreadGroup.end_time">1512450056000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
              <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"> application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[H.P] Travelocity Login " enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);
		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String backslash = &quot;/&quot;;
		String travelocityApp = vars.get(&quot;travelocityIssuer&quot;);
		String endurl = &quot;/index.jsp&quot;;

		String appURL = protocole + tomcathost + seperator + tomcatport + backslash + travelocityApp + endurl;
		driver.get(appURL);

		//driver.get(vars.get(&quot;appURL&quot;));		

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();
		
		WebElement username =  driver.findElement(By.id(&quot;username&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;secondaryUsername&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;password&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;secondaryPassword&quot;)});
	
		WebElement button = driver.findElement(By.xpath(&quot;//button[@type=&apos;submit&apos;]&quot;));
		button.click();


	//Approve Consent of SecondaryUser
		WebElement slectbutton = driver.findElement(By.id(&quot;consent_select_all&quot;));
		slectbutton.click();

		WebElement approvebutton = driver.findElement(By.id(&quot;approve&quot;));
		approvebutton.click();

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);		

	//Approve Consent of PrimaryUser
	//	WebElement slectbutton = driver.findElement(By.id(&quot;consent_select_all&quot;));
	//	slectbutton.click();

	//	WebElement approvebutton = driver.findElement(By.id(&quot;approve&quot;));
	//	approvebutton.click();

	//Returns the whole page
		return driver.getPageSource();  
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="&quot;You are logged in as&quot; Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1435285188">You are logged in as</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">3000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login to SP Travelocity with incorrect credentials - Negative Scenario" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512450056000</longProp>
        <longProp name="ThreadGroup.end_time">1512450056000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
              <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, sdch</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"> application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="[N.P] Travelocity Login with Incorrect Credentials" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);
		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String backslash = &quot;/&quot;;
		String travelocityApp = vars.get(&quot;travelocityIssuer&quot;);
		String endurl = &quot;/index.jsp&quot;;

		String appURL = protocole + tomcathost + seperator + tomcatport + backslash + travelocityApp + endurl;
		driver.get(appURL);

		//driver.get(vars.get(&quot;appURL&quot;));		

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();
		
		WebElement username =  driver.findElement(By.id(&quot;username&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;secondaryUsername&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;password&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;secondaryIncorrectPassword&quot;)});
	
		WebElement button = driver.findElement(By.xpath(&quot;//button[@type=&apos;submit&apos;]&quot;));
		button.click();

	

	//Returns the whole page
		return driver.getPageSource();  
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="&quot;Login failed&quot; Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2038262781">Login failed! Please recheck the username and password and try again</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">3000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Clean up Task" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1509004077000</longProp>
        <longProp name="ThreadGroup.end_time">1509004077000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsername}</stringProp>
                <stringProp name="Authorization.password">${adminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> text/xml;charset=UTF-8&#xd;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Primary SP " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${SPNamePrimary}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:deleteApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete created Sp</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteApplication</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete IDP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:deleteIdP&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:idPName&gt;${ISIdentityProviderName}&lt;/mgt:idPName&gt;&#xd;
      &lt;/mgt:deleteIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Deleting SAMLSSOAuthenticator as Default  Federated Authenticator
</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteIdP</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Secondary IS" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsernameSecondary}</stringProp>
                <stringProp name="Authorization.password">${adminPasswordSecondary}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> text/xml;charset=UTF-8&#xd;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Secondary SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${secondarySPName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:deleteApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete created Sp</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteApplication</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteUser&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:userName&gt;${secondaryUsername}&lt;/xsd:userName&gt;&#xd;
      &lt;/xsd:deleteUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHostSecondary}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPortSecondary}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="SOAPAction" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;deleteUser&quot;</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">scenario-02-results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
