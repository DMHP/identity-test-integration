<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MFA value set 04" enabled="true">
      <stringProp name="TestPlan.comments">Facebook as a federated authenticator</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverHost" elementType="Argument">
            <stringProp name="Argument.name">serverHost</stringProp>
            <stringProp name="Argument.value">${__property(serverHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">${__property(serverPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusername" elementType="Argument">
            <stringProp name="Argument.name">adminusername</stringProp>
            <stringProp name="Argument.value">${__property(adminusername)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminpassword" elementType="Argument">
            <stringProp name="Argument.name">adminpassword</stringProp>
            <stringProp name="Argument.value">${__property(adminpassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName" elementType="Argument">
            <stringProp name="Argument.name">spName</stringProp>
            <stringProp name="Argument.value">${__property(spName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spDescription" elementType="Argument">
            <stringProp name="Argument.name">spDescription</stringProp>
            <stringProp name="Argument.value">${__property(spDescription)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="travelocityAppName" elementType="Argument">
            <stringProp name="Argument.name">travelocityAppName</stringProp>
            <stringProp name="Argument.value">${__property(travelocityAppName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="roleName" elementType="Argument">
            <stringProp name="Argument.name">roleName</stringProp>
            <stringProp name="Argument.value">${__property(roleName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userNamePrefix" elementType="Argument">
            <stringProp name="Argument.name">userNamePrefix</stringProp>
            <stringProp name="Argument.value">${__property(userNamePrefix)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPassword" elementType="Argument">
            <stringProp name="Argument.name">userPassword</stringProp>
            <stringProp name="Argument.value">${__property(userPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatHost" elementType="Argument">
            <stringProp name="Argument.name">tomcatHost</stringProp>
            <stringProp name="Argument.value">${__property(tomcatHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatPort" elementType="Argument">
            <stringProp name="Argument.name">tomcatPort</stringProp>
            <stringProp name="Argument.value">${__property(tomcatPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="permission" elementType="Argument">
            <stringProp name="Argument.name">permission</stringProp>
            <stringProp name="Argument.value">${__property(permission)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName2" elementType="Argument">
            <stringProp name="Argument.name">spName2</stringProp>
            <stringProp name="Argument.value">${__property(spName2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spDescription2" elementType="Argument">
            <stringProp name="Argument.name">spDescription2</stringProp>
            <stringProp name="Argument.value">${__property(spDescription2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConsumerKey" elementType="Argument">
            <stringProp name="Argument.name">ConsumerKey</stringProp>
            <stringProp name="Argument.value">${__property(ConsumerKey)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConsumerSecret" elementType="Argument">
            <stringProp name="Argument.name">ConsumerSecret</stringProp>
            <stringProp name="Argument.value">${__property(ConsumerSecret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName3" elementType="Argument">
            <stringProp name="Argument.name">spName3</stringProp>
            <stringProp name="Argument.value">${__property(spName3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">passiveSTSSp</stringProp>
          </elementProp>
          <elementProp name="spDescription3" elementType="Argument">
            <stringProp name="Argument.name">spDescription3</stringProp>
            <stringProp name="Argument.value">${__property(spDescription3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">This is the passiveSTS SP for Scenario </stringProp>
          </elementProp>
          <elementProp name="adminusernameTa" elementType="Argument">
            <stringProp name="Argument.name">adminusernameTa</stringProp>
            <stringProp name="Argument.value">${__property(adminusernameTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTa</stringProp>
          </elementProp>
          <elementProp name="adminpsswordTa" elementType="Argument">
            <stringProp name="Argument.name">adminpsswordTa</stringProp>
            <stringProp name="Argument.value">${__property(adminpsswordTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTa</stringProp>
          </elementProp>
          <elementProp name="emailAddressTa" elementType="Argument">
            <stringProp name="Argument.name">emailAddressTa</stringProp>
            <stringProp name="Argument.value">${__property(emailAddressTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">tenanta@gmail.com</stringProp>
          </elementProp>
          <elementProp name="fNameTa" elementType="Argument">
            <stringProp name="Argument.name">fNameTa</stringProp>
            <stringProp name="Argument.value">${__property(fNameTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">fnameA</stringProp>
          </elementProp>
          <elementProp name="lNameTa" elementType="Argument">
            <stringProp name="Argument.name">lNameTa</stringProp>
            <stringProp name="Argument.value">${__property(lNameTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">lNameA</stringProp>
          </elementProp>
          <elementProp name="domainTa" elementType="Argument">
            <stringProp name="Argument.name">domainTa</stringProp>
            <stringProp name="Argument.value">${__property(domainTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">tenanta.com</stringProp>
          </elementProp>
          <elementProp name="adminusernameTb" elementType="Argument">
            <stringProp name="Argument.name">adminusernameTb</stringProp>
            <stringProp name="Argument.value">${__property(adminusernameTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTb</stringProp>
          </elementProp>
          <elementProp name="adminpsswordTb" elementType="Argument">
            <stringProp name="Argument.name">adminpsswordTb</stringProp>
            <stringProp name="Argument.value">${__property(adminpsswordTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTb</stringProp>
          </elementProp>
          <elementProp name="emailAddressTb" elementType="Argument">
            <stringProp name="Argument.name">emailAddressTb</stringProp>
            <stringProp name="Argument.value">${__property(emailAddressTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">tenantb@gmail.com</stringProp>
          </elementProp>
          <elementProp name="fNameTb" elementType="Argument">
            <stringProp name="Argument.name">fNameTb</stringProp>
            <stringProp name="Argument.value">${__property(fNameTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">fnameB</stringProp>
          </elementProp>
          <elementProp name="lNameTb" elementType="Argument">
            <stringProp name="Argument.name">lNameTb</stringProp>
            <stringProp name="Argument.value">${__property(lNameTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">lNameB</stringProp>
          </elementProp>
          <elementProp name="domainTb" elementType="Argument">
            <stringProp name="Argument.name">domainTb</stringProp>
            <stringProp name="Argument.value">${__property(domainTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">tenantb.com</stringProp>
          </elementProp>
          <elementProp name="adminusernameLoginTa" elementType="Argument">
            <stringProp name="Argument.name">adminusernameLoginTa</stringProp>
            <stringProp name="Argument.value">${__property(adminusernameLoginTa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTa@tenanta.com</stringProp>
          </elementProp>
          <elementProp name="adminusernameLoginTb" elementType="Argument">
            <stringProp name="Argument.name">adminusernameLoginTb</stringProp>
            <stringProp name="Argument.value">${__property(adminusernameLoginTb)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">adminTb@tenantb.com</stringProp>
          </elementProp>
          <elementProp name="Fusername" elementType="Argument">
            <stringProp name="Argument.name">Fusername</stringProp>
            <stringProp name="Argument.value">${__property(Fusername)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Fpassword" elementType="Argument">
            <stringProp name="Argument.name">Fpassword</stringProp>
            <stringProp name="Argument.value">${__property(Fpassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbIdentityProviderName" elementType="Argument">
            <stringProp name="Argument.name">FbIdentityProviderName</stringProp>
            <stringProp name="Argument.value">${__property(FbIdentityProviderName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbClientId" elementType="Argument">
            <stringProp name="Argument.name">FbClientId</stringProp>
            <stringProp name="Argument.value">${__property(FbClientId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbSecret" elementType="Argument">
            <stringProp name="Argument.name">FbSecret</stringProp>
            <stringProp name="Argument.value">${__property(FbSecret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbCallbackUrl" elementType="Argument">
            <stringProp name="Argument.name">FbCallbackUrl</stringProp>
            <stringProp name="Argument.value">${__property(FbCallbackUrl)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbScope" elementType="Argument">
            <stringProp name="Argument.name">FbScope</stringProp>
            <stringProp name="Argument.value">${__property(FbScope)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbUserInfoFields" elementType="Argument">
            <stringProp name="Argument.name">FbUserInfoFields</stringProp>
            <stringProp name="Argument.value">${__property(FbUserInfoFields)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FacebookPassword" elementType="Argument">
            <stringProp name="Argument.name">FacebookPassword</stringProp>
            <stringProp name="Argument.value">${__property(FacebookPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FaceboookUserName" elementType="Argument">
            <stringProp name="Argument.name">FaceboookUserName</stringProp>
            <stringProp name="Argument.value">${__property(FaceboookUserName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Refer descriptions for changes to be done</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverHost" elementType="Argument">
            <stringProp name="Argument.name">serverHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">9443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusername" elementType="Argument">
            <stringProp name="Argument.name">adminusername</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminpassword" elementType="Argument">
            <stringProp name="Argument.name">adminpassword</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName" elementType="Argument">
            <stringProp name="Argument.name">spName</stringProp>
            <stringProp name="Argument.value">travelocitySP1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spDescription" elementType="Argument">
            <stringProp name="Argument.name">spDescription</stringProp>
            <stringProp name="Argument.value">This is the Travelocity SP Scenario 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="travelocityAppName" elementType="Argument">
            <stringProp name="Argument.name">travelocityAppName</stringProp>
            <stringProp name="Argument.value">travelocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="roleName" elementType="Argument">
            <stringProp name="Argument.name">roleName</stringProp>
            <stringProp name="Argument.value">sol1role</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userNamePrefix" elementType="Argument">
            <stringProp name="Argument.name">userNamePrefix</stringProp>
            <stringProp name="Argument.value">sol1user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPassword" elementType="Argument">
            <stringProp name="Argument.name">userPassword</stringProp>
            <stringProp name="Argument.value">sol1user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatHost" elementType="Argument">
            <stringProp name="Argument.name">tomcatHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatPort" elementType="Argument">
            <stringProp name="Argument.name">tomcatPort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="permission" elementType="Argument">
            <stringProp name="Argument.name">permission</stringProp>
            <stringProp name="Argument.value">/permission/admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName2" elementType="Argument">
            <stringProp name="Argument.name">spName2</stringProp>
            <stringProp name="Argument.value">playgroundSp1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spDescription2" elementType="Argument">
            <stringProp name="Argument.name">spDescription2</stringProp>
            <stringProp name="Argument.value">This is the Playground SP for Scenario 1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConsumerKey" elementType="Argument">
            <stringProp name="Argument.name">ConsumerKey</stringProp>
            <stringProp name="Argument.value">testmaneeshacode0000001230000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ConsumerSecret" elementType="Argument">
            <stringProp name="Argument.name">ConsumerSecret</stringProp>
            <stringProp name="Argument.value">testmaneeshasec00000000456000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userEmailAddress" elementType="Argument">
            <stringProp name="Argument.name">userEmailAddress</stringProp>
            <stringProp name="Argument.value">abc@gamil.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusernameTa" elementType="Argument">
            <stringProp name="Argument.name">adminusernameTa</stringProp>
            <stringProp name="Argument.value">adminTa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminpsswordTa" elementType="Argument">
            <stringProp name="Argument.name">adminpsswordTa</stringProp>
            <stringProp name="Argument.value">adminTa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="emailAddressTa" elementType="Argument">
            <stringProp name="Argument.name">emailAddressTa</stringProp>
            <stringProp name="Argument.value">tenanta@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fNameTa" elementType="Argument">
            <stringProp name="Argument.name">fNameTa</stringProp>
            <stringProp name="Argument.value">fnameA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lNameTa" elementType="Argument">
            <stringProp name="Argument.name">lNameTa</stringProp>
            <stringProp name="Argument.value">lNameA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domainTa" elementType="Argument">
            <stringProp name="Argument.name">domainTa</stringProp>
            <stringProp name="Argument.value">tenanta.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusernameTb" elementType="Argument">
            <stringProp name="Argument.name">adminusernameTb</stringProp>
            <stringProp name="Argument.value">adminTb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminpsswordTb" elementType="Argument">
            <stringProp name="Argument.name">adminpsswordTb</stringProp>
            <stringProp name="Argument.value">adminTb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="emailAddressTb" elementType="Argument">
            <stringProp name="Argument.name">emailAddressTb</stringProp>
            <stringProp name="Argument.value">tenantb@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fNameTb" elementType="Argument">
            <stringProp name="Argument.name">fNameTb</stringProp>
            <stringProp name="Argument.value">fnameB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lNameTb" elementType="Argument">
            <stringProp name="Argument.name">lNameTb</stringProp>
            <stringProp name="Argument.value">lNameB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="domainTb" elementType="Argument">
            <stringProp name="Argument.name">domainTb</stringProp>
            <stringProp name="Argument.value">tenantb.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusernameLoginTa" elementType="Argument">
            <stringProp name="Argument.name">adminusernameLoginTa</stringProp>
            <stringProp name="Argument.value">adminTa@tenanta.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusernameLoginTb" elementType="Argument">
            <stringProp name="Argument.name">adminusernameLoginTb</stringProp>
            <stringProp name="Argument.value">adminTb@tenantb.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Fusername" elementType="Argument">
            <stringProp name="Argument.name">Fusername</stringProp>
            <stringProp name="Argument.value">testuserFacebook</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Fpassword" elementType="Argument">
            <stringProp name="Argument.name">Fpassword</stringProp>
            <stringProp name="Argument.value">facebook123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbIdentityProviderName" elementType="Argument">
            <stringProp name="Argument.name">FbIdentityProviderName</stringProp>
            <stringProp name="Argument.value">FacebookIdpsolution2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbClientId" elementType="Argument">
            <stringProp name="Argument.name">FbClientId</stringProp>
            <stringProp name="Argument.value">381654242297591</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbSecret" elementType="Argument">
            <stringProp name="Argument.name">FbSecret</stringProp>
            <stringProp name="Argument.value">65c65633421002c43929899fc97ae9f3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbCallbackUrl" elementType="Argument">
            <stringProp name="Argument.name">FbCallbackUrl</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbScope" elementType="Argument">
            <stringProp name="Argument.name">FbScope</stringProp>
            <stringProp name="Argument.value">email</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FbUserInfoFields" elementType="Argument">
            <stringProp name="Argument.name">FbUserInfoFields</stringProp>
            <stringProp name="Argument.value">id,name,gender,email,first_name,last_name,age_range,link</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FacebookPassword" elementType="Argument">
            <stringProp name="Argument.name">FacebookPassword</stringProp>
            <stringProp name="Argument.value">Wso2qa@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FaceboookUserName" elementType="Argument">
            <stringProp name="Argument.name">FaceboookUserName</stringProp>
            <stringProp name="Argument.value">wso2qa@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Refer descriptions for changes to be done</stringProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="IAMST-25 : saas enable SP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1508396380000</longProp>
        <longProp name="ThreadGroup.end_time">1508396380000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Tenant" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusername}:${adminpassword}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:addTenant</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Tenant A" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://services.mgt.tenant.carbon.wso2.org&quot; xmlns:xsd=&quot;http://beans.common.stratos.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addTenant&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:tenantInfoBean&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:active&gt;true&lt;/xsd:active&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:admin&gt;${adminusernameTa}&lt;/xsd:admin&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:adminPassword&gt;${adminpsswordTa}&lt;/xsd:adminPassword&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:email&gt;${emailAddressTa}&lt;/xsd:email&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:firstname&gt;${fNameTa}&lt;/xsd:firstname&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:lastname&gt;${lNameTa}&lt;/xsd:lastname&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:tenantDomain&gt;${domainTa}&lt;/xsd:tenantDomain&gt;&#xd;
         &lt;/ser:tenantInfoBean&gt;&#xd;
      &lt;/ser:addTenant&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/TenantMgtAdminService.TenantMgtAdminServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code - Create tenant A" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Tenant B" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://services.mgt.tenant.carbon.wso2.org&quot; xmlns:xsd=&quot;http://beans.common.stratos.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addTenant&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:tenantInfoBean&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:active&gt;true&lt;/xsd:active&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:admin&gt;${adminusernameTb}&lt;/xsd:admin&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:adminPassword&gt;${adminpsswordTb}&lt;/xsd:adminPassword&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:email&gt;${emailAddressTb}&lt;/xsd:email&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:firstname&gt;${fNameTb}&lt;/xsd:firstname&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:lastname&gt;${lNameTb}&lt;/xsd:lastname&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd:tenantDomain&gt;${domainTb}&lt;/xsd:tenantDomain&gt;&#xd;
         &lt;/ser:tenantInfoBean&gt;&#xd;
      &lt;/ser:addTenant&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/TenantMgtAdminService.TenantMgtAdminServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code - Create tenant B" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create User and Role - Tenant B" enabled="true"/>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable username" enabled="true">
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">counter</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusernameLoginTb}:${adminpsswordTb}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User Role in Tenant B" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addRole&gt; &#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:roleName&gt;${roleName}${counter}&lt;/xsd:roleName&gt;&#xd;
	    &lt;xsd:userList&gt;adminTb&lt;/xsd:userList&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;xsd:permissions&gt;${permission}&lt;/xsd:permissions&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:isSharedRole&gt;false&lt;/xsd:isSharedRole&gt;&#xd;
      &lt;/xsd:addRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRole</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User in Tenant B" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://common.mgt.user.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addUser&gt;&#xd;
         &lt;xsd:userName&gt;${userNamePrefix}${counter}&lt;/xsd:userName&gt;&#xd;
         &lt;xsd:password&gt;${userPassword}${counter}&lt;/xsd:password&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
       &lt;xsd:profileName&gt;Default&lt;/xsd:profileName&gt;&#xd;
      &lt;/xsd:addUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addUser</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" IDP Creation tenant A- MFA (Facebook)" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsername}</stringProp>
                <stringProp name="Authorization.password">${adminUsername}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> text/xml;charset=UTF-8&#xd;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="IDP" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddFacebookIDp" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:addIdP&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:displayName&gt;${FbIdentityProviderName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${FbIdentityProviderName} Description&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${FbIdentityProviderName}&lt;/xsd:identityProviderName&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            /** Configure Claims */&#xd;
            &lt;xsd:claimConfig&gt;&#xd;
               &lt;xsd:alwaysSendMappedLocalSubjectId&gt;true&lt;/xsd:alwaysSendMappedLocalSubjectId&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/nickname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;id&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/fullname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;email&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/givenname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;first_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/lastname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;last_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/dob&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;age_range&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/url&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;0&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;link&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;16&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;id&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;17&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;18&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;gender&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;19&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;email&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;20&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;first_name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;21&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;last_name&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;22&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;age_range&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;xsd:claimId&gt;23&lt;/xsd:claimId&gt;&#xd;
                  &lt;xsd:claimUri&gt;link&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:localClaimDialect&gt;false&lt;/xsd:localClaimDialect&gt;&#xd;
               &lt;xsd:userClaimURI&gt;email&lt;/xsd:userClaimURI&gt;&#xd;
            &lt;/xsd:claimConfig&gt;&#xd;
            &lt;xsd:defaultAuthenticatorConfig&gt;&#xd;
               &lt;xsd:displayName&gt;facebook&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
            &lt;/xsd:defaultAuthenticatorConfig&gt;&#xd;
            &lt;xsd:federatedAuthenticatorConfigs&gt;&#xd;
               &lt;xsd:displayName&gt;facebook&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:enabled&gt;true&lt;/xsd:enabled&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientId&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${FbClientId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientSecret&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${FbSecret}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;callBackUrl&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;https://${serverHost}:${serverPort}/commonauth&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;Scope&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${FbScope}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;UserInfoFields&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${FbUserInfoFields}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
            &lt;/xsd:federatedAuthenticatorConfigs&gt;&#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
              <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService?wsdl</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Adding facebook as Default  Federated Authenticator
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">urn:addIdP</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Travelocity SP creation -Tenant A" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusernameLoginTa}:${adminpsswordTa}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Creating a SP ( travelocity ) in tenant A" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
       &lt;xsd:createApplication&gt; &#xd;
      &lt;xsd:serviceProvider&gt; &#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt;           &#xd;
         &lt;/xsd:serviceProvider&gt; &#xd;
      &lt;/xsd:createApplication&gt; &#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:createApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Registering Travelocity" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.saml.sso.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addRPServiceProvider&gt;      &#xd;
         &lt;xsd:spDto&gt;        &#xd;
            &lt;xsd1:issuer&gt;${travelocityAppName}&lt;/xsd1:issuer&gt;   &#xd;
            &#xd;
            &lt;xsd1:assertionConsumerUrls&gt;http://${tomcatHost}:${tomcatPort}/travelocity.com/home.jsp&lt;/xsd1:assertionConsumerUrls&gt;&#xd;
            &#xd;
            &lt;xsd1:defaultAssertionConsumerUrl&gt;http://${tomcatHost}:${tomcatPort}/travelocity.com/home.jsp&lt;/xsd1:defaultAssertionConsumerUrl&gt;&#xd;
            &#xd;
            &lt;xsd1:signingAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#rsa-sha1&lt;/xsd1:signingAlgorithmURI&gt;            &#xd;
            &lt;xsd1:digestAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#sha1&lt;/xsd1:digestAlgorithmURI&gt;&#xd;
            &#xd;
            &lt;xsd1:doSignAssertions&gt;true&lt;/xsd1:doSignAssertions&gt;&#xd;
            &lt;xsd1:doSignResponse&gt;true&lt;/xsd1:doSignResponse&gt;&#xd;
            &lt;xsd1:doSingleLogout&gt;true&lt;/xsd1:doSingleLogout&gt;&#xd;
            &lt;xsd1:doValidateSignatureInRequests&gt;false&lt;/xsd1:doValidateSignatureInRequests&gt;&#xd;
            &lt;xsd1:enableAttributeProfile&gt;true&lt;/xsd1:enableAttributeProfile&gt;&#xd;
            &lt;xsd1:enableAttributesByDefault&gt;true&lt;/xsd1:enableAttributesByDefault&gt;      &#xd;
         &lt;/xsd:spDto&gt;&#xd;
      &lt;/xsd:addRPServiceProvider&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService.IdentitySAMLSSOConfigServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRPServiceProvider</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ServiceIndex for created SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getServiceProviders/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService.IdentitySAMLSSOConfigServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Service Index Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceIndex</stringProp>
              <stringProp name="RegexExtractor.regex">attributeConsumingServiceIndex&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_ServiceIndex</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getServiceProviders</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get SP app ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${spName}&lt;/xsd:applicationName&gt; &#xd;
      &lt;/xsd:getApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">appID</stringProp>
              <stringProp name="RegexExtractor.regex">applicationID&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_AppID</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt;&#xd;
            /** Configure Claims */&#xd;
            &lt;xsd:claimConfig&gt;&#xd;
               &lt;xsd:alwaysSendMappedLocalSubjectId&gt;true&lt;/xsd:alwaysSendMappedLocalSubjectId&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;1&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/nickname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;1&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;id&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;2&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/fullname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;2&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;3&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;3&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;gender&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;4&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;4&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;email&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;5&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/givenname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;5&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;first_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;6&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/lastname&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;6&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;last_name&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;7&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/dob&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;7&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;age_range&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:claimMappings&gt;&#xd;
                  &lt;xsd:localClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;8&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;http://wso2.org/claims/url&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:localClaim&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:mandatory&gt;false&lt;/xsd:mandatory&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:remoteClaim&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimId&gt;8&lt;/xsd:claimId&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd:claimUri&gt;link&lt;/xsd:claimUri&gt;&#xd;
                  &lt;/xsd:remoteClaim&gt;&#xd;
               &lt;/xsd:claimMappings&gt;&#xd;
               &lt;xsd:idpClaims&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:claimId&gt;1&lt;/xsd:claimId&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;xsd:claimUri&gt;ids&lt;/xsd:claimUri&gt;&#xd;
               &lt;/xsd:idpClaims&gt;&#xd;
               &lt;xsd:localClaimDialect&gt;false&lt;/xsd:localClaimDialect&gt;&#xd;
               &lt;xsd:roleClaimURI&gt;email&lt;/xsd:roleClaimURI&gt;&#xd;
            &lt;/xsd:claimConfig&gt;&#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt;&#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
                  &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;&#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityIssuer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
            &lt;/xsd1:inboundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:inboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt;&#xd;
               &lt;xsd1:provisioningUserStore/&gt;&#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt;&#xd;
&#xd;
&#xd;
&#xd;
            	/** Configure Multi Steps */&#xd;
&lt;xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
    &lt;!--Optional:--&gt;&#xd;
    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;&#xd;
    &lt;!--Zero or more repetitions:--&gt;&#xd;
&#xd;
    &#xd;
    &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:attributeStep&gt;false&lt;/xsd1:attributeStep&gt;&#xd;
	   &lt;xsd1:subjectStep&gt;false&lt;/xsd1:subjectStep&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &#xd;
        &lt;xsd1:federatedIdentityProviders&gt;&#xd;
        &#xd;
            &lt;xsd1:defaultAuthenticatorConfig&gt;&#xd;
                &lt;xsd1:alais/&gt;&#xd;
                &lt;xsd1:certificate/&gt;            &#xd;
                &lt;xsd1:claimConfig/&gt;            &#xd;
                &lt;xsd1:displayName&gt;${FbIdentityProviderName}&lt;/xsd1:displayName&gt;&#xd;
                &lt;xsd1:enabled&gt;false&lt;/xsd1:enabled&gt;            &#xd;
                &lt;xsd1:name&gt;TwitterAuthenticator&lt;/xsd1:name&gt;&#xd;
                &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:defaultAuthenticatorConfig&gt;&#xd;
&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:federatedAuthenticatorConfigs&gt;&#xd;
              &lt;xsd1:displayName&gt;${FbIdentityProviderName}&lt;/xsd1:displayName&gt;&#xd;
                &lt;xsd1:enabled&gt;false&lt;/xsd1:enabled&gt;            &#xd;
                &lt;xsd1:name&gt;FacebookAuthenticator&lt;/xsd1:name&gt;&#xd;
                &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;           &#xd;
        &lt;/xsd1:federatedAuthenticatorConfigs&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:identityProviderName&gt;${FbIdentityProviderName}&lt;/xsd1:identityProviderName&gt;&#xd;
        &lt;xsd1:enable&gt;false&lt;/xsd1:enable&gt;     &#xd;
        &lt;xsd1:primary&gt;false&lt;/xsd1:primary&gt; &#xd;
        &lt;xsd1:federationHub&gt;false&lt;/xsd1:federationHub&gt;                     &#xd;
        &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
           &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:stepOrder&gt;2&lt;/xsd1:stepOrder&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
&#xd;
    &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:attributeStep&gt;true&lt;/xsd1:attributeStep&gt;&#xd;
	&lt;xsd1:subjectStep&gt;true&lt;/xsd1:subjectStep&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
       &#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:localAuthenticatorConfigs&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:displayName&gt;basic&lt;/xsd1:displayName&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:enabled&gt;false&lt;/xsd1:enabled&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:name&gt;BasicAuthenticator&lt;/xsd1:name&gt;&#xd;
	        &lt;!--Zero or more repetitions:--&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
        &lt;/xsd1:localAuthenticatorConfigs&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:stepOrder&gt;1&lt;/xsd1:stepOrder&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
&#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
 &#xd;
    &lt;!--Optional:--&gt;&#xd;
    &lt;xsd1:authenticationType&gt;flow&lt;/xsd1:authenticationType&gt;&#xd;
    &lt;xsd1:subjectClaimUri&gt;id&lt;/xsd1:subjectClaimUri&gt;&#xd;
&lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:outboundProvisioningConfig&gt;&#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt;&#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt;&#xd;
            &lt;xsd1:owner&gt;&#xd;
            &#xd;
               &lt;xsd1:userName&gt;${adminusernameTa}&lt;/xsd1:userName&gt;&#xd;
                      &lt;/xsd1:owner&gt;&#xd;
            &lt;xsd1:permissionAndRoleConfig&gt;&#xd;
               &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt;&#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt;&#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;&#xd;
            &lt;xsd1:saasApp&gt;true&lt;/xsd1:saasApp&gt;&#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update SP" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            /&lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &lt;xsd1:claimConfig&gt; &#xd;
               &lt;xsd1:alwaysSendMappedLocalSubjectId&gt;true&lt;/xsd1:alwaysSendMappedLocalSubjectId&gt; &#xd;
               &lt;xsd1:localClaimDialect&gt;true&lt;/xsd1:localClaimDialect&gt;&#xd;
            &lt;/xsd1:claimConfig&gt; &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt; &#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;            &#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityAppName}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;                  &#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
			   &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;                      &#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;                  &#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;    &#xd;
&#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityAppName}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${travelocityAppName}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;                                       &#xd;
           &lt;/xsd1:inboundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:inboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt; &#xd;
               &lt;xsd1:provisioningUserStore/&gt; &#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt; &#xd;
&lt;xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
    &lt;!--Optional:--&gt;&#xd;
    &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;&#xd;
    &lt;!--Zero or more repetitions:--&gt;&#xd;
    &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
&#xd;
	   &lt;xsd1:subjectStep&gt;true&lt;/xsd1:subjectStep&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:localAuthenticatorConfigs&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:displayName&gt;basic&lt;/xsd1:displayName&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:enabled&gt;false&lt;/xsd1:enabled&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:name&gt;BasicAuthenticator&lt;/xsd1:name&gt;&#xd;
	        &lt;!--Zero or more repetitions:--&gt;&#xd;
	        &lt;!--Optional:--&gt;&#xd;
	        &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
        &lt;/xsd1:localAuthenticatorConfigs&gt;&#xd;
        &lt;!--Optional:--&gt;&#xd;
        &lt;xsd1:stepOrder&gt;1&lt;/xsd1:stepOrder&gt;&#xd;
        &lt;!--Optional:--&gt;   &#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
      &#xd;
    &lt;!--Optional:--&gt;	&#xd;
    &lt;xsd1:authenticationType&gt;flow&lt;/xsd1:authenticationType&gt;&#xd;
    &lt;xsd1:subjectClaimUri /&gt;&#xd;
&lt;/xsd1:localAndOutBoundAuthenticationConfig&gt;&#xd;
            &lt;xsd1:outboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt; &#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt; &#xd;
            &lt;xsd1:permissionAndRoleConfig&gt; &#xd;
             &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt; &#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt; &#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;              &#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;               &#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;           &#xd;
            &lt;xsd1:saasApp&gt;true&lt;/xsd1:saasApp&gt; &#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Travelocity Login - MFA  (Facebook)" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Travelocity Login - Basic -&gt; Facebook" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);
		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String backslash = &quot;/&quot;;
		String travelocityApp = vars.get(&quot;travelocityIssuer&quot;);
		String endurl = &quot;/index.jsp&quot;;

		String appURL = protocole + tomcathost + seperator + tomcatport + backslash + travelocityApp + endurl;
		driver.get(appURL);

		//driver.get(vars.get(&quot;appURL&quot;));		

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);		

		WebElement username =  driver.findElement(By.id(&quot;username&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;adminUsername&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;password&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;adminPassword&quot;)});

		WebElement button = driver.findElement(By.xpath(&quot;//button[@type=&apos;submit&apos;]&quot;));
		button.click();

		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);		
		
		WebElement username =  driver.findElement(By.id(&quot;email&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;FaceboookUserName&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;pass&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;FacebookPassword&quot;)});
	
		WebElement loginbutton = driver.findElement(By.id(&quot;loginbutton&quot;));
		loginbutton.click();

		WebElement selectbutton = driver.findElement(By.xpath(&quot;//input[@id=&apos;consent_select_all&apos;]&quot;));
        	selectbutton.click();

        	WebElement approvebutton = driver.findElement(By.id(&quot;approve&quot;));
        	approvebutton.click();

        	WebElement logoutlink =  driver.findElement(By.xpath(&quot;//a[text()=&apos;Logout (HTTP Post)&apos;]&quot;));
		logoutlink.click();
 

	//Returns the whole page
		return driver.getPageSource();  
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="&quot;You are logged in as&quot; Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="92201765">User Logged out</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP and IDP clean up - MFA (Facebook)" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${adminUsername}</stringProp>
                <stringProp name="Authorization.password">${adminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> text/xml;charset=UTF-8&#xd;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete SP created for Fcebook" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${spName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:deleteApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">delete created Sp</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteApplication</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteFacebookIDp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:deleteIdP&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:idPName&gt;${FbIdentityProviderName}&lt;/mgt:idPName&gt;&#xd;
      &lt;/mgt:deleteIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Deleting Facebook as Default Federated Authenticator
</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteIdP</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cleanup users - saas enable SP" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusernameLoginTb}:${adminpsswordTb}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete User -  saas enable SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteUser&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:userName&gt;${userNamePrefix}${counter}&lt;/xsd:userName&gt;&#xd;
      &lt;/xsd:deleteUser&gt;   &#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete Created User</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Role - saas enable SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:roleName&gt;${roleName}${counter}&lt;/xsd:roleName&gt;&#xd;
      &lt;/xsd:deleteRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete a created role</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteRole</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CleanupSP- saas enable SP" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusernameLoginTa}:${adminpsswordTa}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Travelocity SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${spName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:deleteApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete Created Travelocity SP</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CleanupTenants- saas enable SP" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">false</boolProp>
            <boolProp name="useExpires">false</boolProp>
          </CacheManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] encodedUsernamePassword = Base64.encodeBase64(&quot;${adminusername}:${adminpassword}&quot;.getBytes());
vars.put(&quot;base64HeaderValue&quot;,new String(encodedUsernamePassword));</stringProp>
            <stringProp name="TestPlan.comments">This is use to base64 encode the username and password</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${base64HeaderValue}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete tenant A -  saas enable SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteTenant&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:tenantId&gt;${domainTa}&lt;/ser:tenantId&gt;&#xd;
      &lt;/ser:deleteTenant&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete Created User</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete tenant B - saas enable SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteTenant&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:tenantId&gt;${domainTb}&lt;/ser:tenantId&gt;&#xd;
      &lt;/ser:deleteTenant&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverHost}</stringProp>
            <stringProp name="HTTPSampler.port">${serverPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/UserAdmin.UserAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Delete Created User</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">scenario-02-results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
